---
# tasks file for Nexus
- name: Debug old parameters
  debug:
    msg: "_nexus_volume_size: {{ nexus_volume_size }}, _nexus_ssl: {{ nexus_ssl }}"
- name: Debug parameters things
  debug:
    msg: "_nexus_state: {{ _nexus_state }}, _nexus_service_account: {{ _nexus_service_account }}, _nexus_cpu_request: {{ _nexus_cpu_request }}, _nexus_memory_request: {{ _nexus_memory_request }}, _nexus_cpu_limit: {{ _nexus_cpu_limit }}, _nexus_memory_limit: {{ _nexus_memory_limit }},_new_nexus_admin_password: {{ _new_nexus_admin_password }}"

- name: Set Nexus Service to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: "{{ _nexus_name }}"
        namespace: "{{ _nexus_namespace }}"
        labels:
          app: "{{ _nexus_name }}"
      spec:
        selector:
          app: "{{ _nexus_name }}"
        ports:
        - name: "nexus-tcp"
          port: 8081
          protocol: TCP
          targetPort: 8081
        sessionAffinity: None
        type: ClusterIP

- name: Set Nexus Registry Service to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: "{{ _nexus_name }}-registry"
        namespace: "{{ _nexus_namespace }}"
        labels:
          app: "{{ _nexus_name }}"
      spec:
        selector:
          app: "{{ _nexus_name }}"
        ports:
        - name: "nexus-registry-tcp"
          port: 5000
          protocol: TCP
          targetPort: 5000
        sessionAffinity: None
        type: ClusterIP

- name: Set Nexus Route to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    definition: "{{ lookup('template', './templates/nexus_route.j2') | from_yaml }}"
  register: nexus_route
- name: Set Nexus PersistentVolumeClaim to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: "{{ _nexus_name }}-pvc"
        namespace: "{{ _nexus_namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ _nexus_volume_size }}"

- name: Set Nexus Pod to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ _nexus_name }}"
        namespace: "{{ _nexus_namespace }}"
        labels:
          app: "{{ _nexus_name }}"
      spec:
        containers:
        - image: "{{ _nexus_image }}:{{ _nexus_image_tag }}"
          imagePullPolicy: IfNotPresent
          name: nexus
          ports:
          - containerPort: 8081
            protocol: TCP
          - containerPort: 5000
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 1
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 120
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: "{{ _nexus_cpu_request }}"
              memory: "{{ _nexus_memory_request }}"
            limits:
              cpu: "{{ _nexus_cpu_limit }}"
              memory: "{{ _nexus_memory_limit }}"
          volumeMounts:
          - name: nexus-data
            mountPath: /nexus-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: nexus-data
          persistentVolumeClaim:
            claimName: "{{ _nexus_name }}-pvc"
  register: nexus_pod_changed

- name: Pause to wait for pod to be in the system
  when:
    - _nexus_state == "present"
    - _nexus_wait_for_init|bool
  pause:
    seconds: 5

- name: Verify that the Nexus Pod is running
  when:
    - _nexus_state == "present"
    - _nexus_wait_for_init|bool
  k8s:
    api_version: v1
    kind: Pod
    name: "{{ _nexus_name }}"
    namespace: "{{ _nexus_namespace }}"
  register: nexus_pod
  until:
  - nexus_pod.result.status.phase == "Running"
  retries: 50
  delay: 10
  changed_when: false

- name: Wait for the Nexus Pod to be ready
  when:
    - _nexus_state == "present"
    - _nexus_wait_for_init|bool
  k8s:
    api_version: v1
    kind: Pod
    name: "{{ _nexus_name }}"
    namespace: "{{ _nexus_namespace }}"
  register: nexus_pod
  until:
  - nexus_pod.result.status.containerStatuses[0].ready|d(False)|bool
  retries: 50
  delay: 10
  changed_when: false

- name: Perform Initial Nexus Configuration
  include_tasks: setup.yml
  when: nexus_pod_changed.method == "create"
  vars:
    nexus_url: "{{ 'http' if not _nexus_ssl|d(False)|bool else 'https' }}://{{ nexus_route.result.spec.host }}"
